# Default values for database-dev.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: postgres
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "12.13-alpine3.17"

namespace: database-dev

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 5432

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: database-dev.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   memory: "2Gi"
  #   cpu: "1000m"
  requests:
    memory: "250Mi"
    cpu: "100m"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector:
  kubernetes.io/os: linux

tolerations:
  - key: node-role.kubernetes.io/master
    effect: NoSchedule

affinity: {}

secret:
  db:
    password: "P@ssw0rd"

persistentvolume:
  storage: 5Gi
  accessModes: ReadWriteOnce
  path: "/mnt/data"
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - minions-node1

persistentvolumeclaim:
  accessModes: ReadWriteOnce
  storage: 1Gi

volumes:
  - name: postgres-pv-storage
    persistentVolumeClaim:
      claimName: database-dev-pv-claim

env:
  - name: POSTGRES_PASSWORD
    valueFrom:
      secretKeyRef:
        name: database-dev-secret
        key: db.password
  - name: PGDATA
    value: /var/lib/postgresql/data/pgdata

volumeMounts:
  - name: postgres-pv-storage
    mountPath: /var/lib/postgresql/data

livenessProbe:
  exec:
    command: ["psql", "-w", "-U", "postgres", "-d", "postgres", "-c", "SELECT 1"]
  initialDelaySeconds: 45
  timeoutSeconds: 2

readinessProbe:
  exec:
    command: ["psql", "-w", "-U", "postgres", "-d", "postgres", "-c", "SELECT 1"]
  initialDelaySeconds: 15
  timeoutSeconds: 2

storageclass:
  provisioner: kubernetes.io/no-provisioner
  volumeBindingMode: WaitForFirstConsumer
